<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>初雪的中二 &amp; 爆肝工程師之路</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://j6qup3.github.io/"/>
  <updated>2016-08-08T19:50:10.439Z</updated>
  <id>https://j6qup3.github.io/</id>
  
  <author>
    <name>Jacky Wu (Hatsuyuki Wu)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>猴子也能看懂的 React 教學 - 1</title>
    <link href="https://j6qup3.github.io/2016/08/06/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-1/"/>
    <id>https://j6qup3.github.io/2016/08/06/猴子也能看懂的-React-教學-1/</id>
    <published>2016-08-06T08:44:42.000Z</published>
    <updated>2016-08-08T19:50:10.439Z</updated>
    
    <content type="html"><![CDATA[<p><del>其實標題打錯了，是猴子<strong>才</strong>能看懂。</del><br>看不懂就別怪我囉，至少可以證明你不是猴子(X</p>
<p>那我們就開始吧~</p>
<h2 id="下載-React"><a href="#下載-React" class="headerlink" title="下載 React"></a>下載 React</h2><p>首先，到 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React 官網</a> 下載 <a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">React 最新版</a>。<br>在等待下載的同時來說明一下何為 React。</p>
<h2 id="什麼是-React？"><a href="#什麼是-React？" class="headerlink" title="什麼是 React？"></a>什麼是 React？</h2><p>React 是一個 JS 函式庫，負責產生與管理前端的 UI 。它<strong>並不是框架</strong>。</p>
<h2 id="React-特色-–-為什麼我要用它？"><a href="#React-特色-–-為什麼我要用它？" class="headerlink" title="React 特色 – 為什麼我要用它？"></a>React 特色 – 為什麼我要用它？</h2><ol>
<li>用純 JS 在前端產生 HTML （一般來說是在後端產生 HTML 送到前端）</li>
<li>使用虛擬 DOM，重繪時效率高</li>
<li>自定義 <strong>Component</strong>，方便開發</li>
<li>父子 <strong>Component</strong> 可透過 <strong>props</strong> 和 <strong>callback</strong> 通訊</li>
<li>只負責 MVC 的 View 部份，所以不算框架，彈性高</li>
<li>因為完全是 JS 操作 UI 的關係，使得它可以跟後端分離，達到即時互動、自動更新的效果</li>
<li>只是一個 JS 函式庫，所以容量小易移植</li>
</ol>
<p>這樣對 React 有沒有比較明白了呢？<br>那我們首先來看看一個例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset="UTF-8" /&gt;</div><div class="line">    &lt;title&gt;Hello React!&lt;/title&gt;</div><div class="line">    &lt;script src="build/react.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="build/react-dom.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="https://npmcdn.com/babel-core@5.8.38/browser.min.js"&gt;&lt;/script&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;div id="example"&gt;&lt;/div&gt;</div><div class="line">    &lt;script type="text/babel"&gt;</div><div class="line">      ReactDOM.render(</div><div class="line">        &lt;h1&gt;Hello, world!&lt;/h1&gt;,</div><div class="line">        document.getElementById('example')</div><div class="line">      );</div><div class="line">    &lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>這是官網的例子，被我仁了(X<br>我假設各位都知道 HTML 的語法，這裡不再贅述。<br>首先，要用 React 的話，必須先引入 React 函式庫。如第 6 行、第 7 行。<br>第 8 行引入的是 <strong>babel</strong> 函式庫，用來編譯 JSX 成 JS，至於什麼是 JSX 稍後會解釋。<br>12 行 ~ 17 行是<strong>重點</strong>，用 React 在 id 為 example 的元件內渲染出 h1 tag。</p>
<p>那我們在講 React 之前先說說 JSX 吧。若已經會或者不想用 JSX 的話可以先跳到<a href="#nex">下一段</a>。</p>
<h2 id="為什麼要用-JSX？"><a href="#為什麼要用-JSX？" class="headerlink" title="為什麼要用 JSX？"></a>為什麼要用 JSX？</h2><p>前面說過，React 是用純 JS 在前端產生 HTML 的，用原生 JS 寫起來會很麻煩 （一堆 createElement），因此，我們可以使用 <strong>JSX</strong>，它是 JS / ECMAScript 對 XML 的擴充語法，以 XML-like 的語法表達 JS 產生元件的函數，簡單來說就是語法糖 (Syntatic Sugar)。使用的話有助於精簡程式碼，而且對於大多數前端工程師來說 XML 的格式比較直觀，易於閱讀。</p>
<p>JSX<br><code>&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;Hello!&lt;/a&gt;</code></p>
<p>等同於</p>
<p>JS<br><code>React.createElement(&#39;a&#39;, {href: &#39;https://facebook.github.io/react/&#39;}, &#39;Hello!&#39;)</code></p>
<p>上面的範例中可以發現 JSX 的程式碼明顯精簡易讀。<br>如果要創建具有父子關係的多個節點，那兩者複雜度就會差更多了。</p>
<blockquote>
<p>總結<br>JSX 是開發 React 推薦使用的語言，你可以不用 JSX，然而那將使程式碼難以閱讀和維護。</p>
</blockquote>
<h2 id="怎麼編譯-JSX？"><a href="#怎麼編譯-JSX？" class="headerlink" title="怎麼編譯 JSX？"></a>怎麼編譯 JSX？</h2><p>JSX 可以像上面的例子一樣被包在 HTML 的 <code>&lt;script type=&quot;text/babel&quot;&gt;&lt;/script&gt;</code> 中，引入 JSX 編譯器 babel，直接在 Client 端解析，但我們一般會將 JSX 分成獨立檔案以便維護以及增加載入效率，然後用 babel 編譯成 JS （現在幾乎都會使用 <strong>CommonJS bundler</strong>）。<br>EX：<code>&lt;script type=&quot;text/jsx&quot; src=&quot;main.jsx&quot;&gt;&lt;/script&gt;</code></p>
<h2 id="JSX-怎麼寫？"><a href="#JSX-怎麼寫？" class="headerlink" title="JSX 怎麼寫？"></a>JSX 怎麼寫？</h2><p>HTML 大部份的寫法在 JSX 都可以通用，<strong>除了</strong>以下幾點限制：</p>
<ol>
<li>HTML 的 class 屬性在 JSX 須寫為 className (class 為 JSX 保留字)</li>
<li>HTML 的 for 屬性在 JSX 須寫為 htmlFor (for 為 JSX 保留字)</li>
<li>所有 tag 都須被閉合 (XML 的特性)<br>EX：HTML <code>&lt;br&gt;</code> =&gt; JSX <code>&lt;br /&gt;</code></li>
<li>同 JS，註解可以用 <code>/* */</code> 或 <code>//</code>，在 tag 中使用的話則須用大括號 <strong>{}</strong> 包住</li>
<li>style 屬性要以 JS 物件的格式設定。別忘記外面要再加上一層大括號。</li>
</ol>
<p>JSX 除了 HTML 外還可以用其他的寫法，例：</p>
<ol>
<li>因為 JSX 只是 JS 的擴充語法，JS 語法仍可使用，在 tag 中使用的話則須用大括號 <strong>{}</strong> 包住</li>
<li>可以用 <strong>class</strong> 自定義 Component 來使用 (XML 的特性 + JS 的類別)</li>
</ol>
<p>另外，JSX 是將 tag 轉換成函數，因此一個頂端 tag 對應一個函數。在 retuen 時只能回傳一個頂端 tag，可以在最外層套一個 div 或 Component 解決這個問題。</p>
<p>以上講的很簡略，如果想知道更多資訊，可以看一下<a href="http://blog.techbridge.cc/2016/04/21/react-jsx-introduction/#%E4%BA%8C%E3%80%81JSX-%E7%94%A8%E6%B3%95%E6%91%98%E8%A6%81" target="_blank" rel="external">這裡</a>。</p>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;其實標題打錯了，是猴子&lt;strong&gt;才&lt;/strong&gt;能看懂。&lt;/del&gt;&lt;br&gt;看不懂就別怪我囉，至少可以證明你不是猴子(X&lt;/p&gt;
&lt;p&gt;那我們就開始吧~&lt;/p&gt;
&lt;h2 id=&quot;下載-React&quot;&gt;&lt;a href=&quot;#下載-React&quot; class=&quot;h
    
    </summary>
    
      <category term="教學" scheme="https://j6qup3.github.io/categories/%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="React" scheme="https://j6qup3.github.io/tags/React/"/>
    
      <category term="教學" scheme="https://j6qup3.github.io/tags/%E6%95%99%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>發文囉</title>
    <link href="https://j6qup3.github.io/2016/07/29/%E7%99%BC%E6%96%87%E5%9B%89/"/>
    <id>https://j6qup3.github.io/2016/07/29/發文囉/</id>
    <published>2016-07-28T23:15:54.000Z</published>
    <updated>2016-08-04T19:12:24.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="這是一篇廢文"><a href="#這是一篇廢文" class="headerlink" title="這是一篇廢文"></a>這是一篇廢文</h1><p><code>感謝您將寶貴的生命浪費在這</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;這是一篇廢文&quot;&gt;&lt;a href=&quot;#這是一篇廢文&quot; class=&quot;headerlink&quot; title=&quot;這是一篇廢文&quot;&gt;&lt;/a&gt;這是一篇廢文&lt;/h1&gt;&lt;p&gt;&lt;code&gt;感謝您將寶貴的生命浪費在這&lt;/code&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="廢" scheme="https://j6qup3.github.io/categories/%E5%BB%A2/"/>
    
    
      <category term="廢到笑" scheme="https://j6qup3.github.io/tags/%E5%BB%A2%E5%88%B0%E7%AC%91/"/>
    
  </entry>
  
</feed>

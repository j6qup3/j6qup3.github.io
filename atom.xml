<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>初雪的中二 &amp; 爆肝工程師之路</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://j6qup3.github.io/"/>
  <updated>2016-09-07T21:10:19.025Z</updated>
  <id>https://j6qup3.github.io/</id>
  
  <author>
    <name>Jacky Wu (Hatsuyuki Wu)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>猴子也能看懂的 React 教學 - 4 - 從 React 走向框架，把後端移到前端</title>
    <link href="https://j6qup3.github.io/2016/08/19/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-4/"/>
    <id>https://j6qup3.github.io/2016/08/19/猴子也能看懂的-React-教學-4/</id>
    <published>2016-08-18T19:17:59.000Z</published>
    <updated>2016-09-07T21:10:19.025Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt -->
<p>React 本身不是框架，因為功能單一不全面，但加上其他輔助套件可以讓整體作為框架來使用。<br>本篇會介紹兩個輔助套件 – React Router 和 Redux。<br>這兩個套件將實現 Route 管理以及資料流的統一，讓 React 不只是 React，讓 View 不只是 View，而是具有 MVCR 的完整前端框架。</p>
<hr>
<!-- toc -->
<hr>
<h1 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h1><h2 id="概念-Front-End-Routing"><a href="#概念-Front-End-Routing" class="headerlink" title="概念 - Front-End Routing"></a>概念 - Front-End Routing</h2><p>對於 React 來說，SPA (Single Page Application，單頁面應用) 是很常見的一種網站形式 (例如 FB)，因為這樣才能把 React 的特色發揮的淋漓盡致，而 SPA 一般來說不會 Reload，所有頁面更新都用 ajax 和重繪來完成。<br>所以正常來說 SPA 會有多個 API 當作 ajax 的接口，還有一個 view 作為顯示的頁面，view 頁面的切換就必須靠 Front-End Routing (前端轉址) 來完成。<br>但一般的 Routing 都是 Back-End Routing，不支援 Front-End Routing，但<br>React Router 可以做到 Front-End Routing。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="假網址"><a href="#假網址" class="headerlink" title="假網址"></a>假網址</h3><p>React Router 會用 js 幫你讀 URL，依照 URL 替換 Component，進行前端轉址。</p>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>轉址方式主要分為 browserHistory、hashHistory 和 memoryHistory 三種。</p>
<ul>
<li><p>browserHistory<br>介紹：官方範例使用的轉址方式，利用 html5 的 History API (history.pushState() &amp; replaceState() &amp; popstate()) 來進行網址的假修改。<br>原理：詳細可以看<a href="http://javascript.ruanyifeng.com/bom/history.html#toc1" target="_blank" rel="external">這篇</a>。<br>優點：網址簡潔好看。<br>缺點：History API 是 html5 的特性，因此一些較老舊的瀏覽器就 GG 了 (例如<del>萬惡的</del> IE6)，這種情況下頁面還是可以顯示，但是就免不了 reload 了。另外，需要有後端轉址框架 (例如前一篇提到的 Express) 配合而不能單純以靜態頁面顯示，所以後端轉址框架要設定 <code>*</code> (萬用字元) 指到 view，不然一旦 reload 就會<del>跟我的女友一樣</del> 404。<br>PS：browserHistory 有三種常見的情況會觸發 reload：瀏覽器不支援 History API、使用者在子頁面按 F5 的時候和直接用子頁面的假網址連進來的時候。</p>
</li>
<li><p>hashHistory<br>介紹：React Router 預設使用的轉址方式，利用瀏覽器不會將錨點變化視做頁面變化的特性來轉址。<br>原理：設定及讀取 location.hash，並使用 location.replace() 來轉址，onhashchange 來偵測網址變更。<br>優點：所有瀏覽器都適用 (錨點早期的瀏覽器就會吃了)，且不需要依靠後端轉址框架。(利用錨點的特性，瀏覽器不會 reload)<br>缺點：網址中有 <code>#</code> 和 <code>_k</code> 會影響網址美觀。</p>
</li>
<li><p>memoryHistory<br>介紹：將 state 存入 memory 中，URL 不會變化，reload 時會回到 最初的頁面。<br>優點：<br>缺點：</p>
</li>
</ul>
<p>詳細原理可以看<a href="http://zhenhua-lee.github.io/react/history.html" target="_blank" rel="external">這篇</a>。</p>
<h2 id="Components-of-React-Router"><a href="#Components-of-React-Router" class="headerlink" title="Components of React-Router"></a>Components of React-Router</h2><ul>
<li>Router<br>React Router 中必用的元件，能保持 UI 和 URL 的同步。<br>屬性 (props)：<ul>
<li>children / routes (必填)<br>跟一般元件的 children 一樣是用來傳入子元件的，同樣地，也可以將子元件用兩個 tag 括住。<br>子元件：<ul>
<li>Route<br>聲明 URL 和 Component 的映射關係。<br>屬性 (props)：<ul>
<li>path<br>設定 URL 路徑。</li>
<li>component<br>URL 映射到的 Component。當 URL 和 path 匹配時，此 Component 將會被渲染。<br>並且，父子 Route 的 Component 也具有父子關係。<br>因此父 Route 的 Component 中使用 <code>this.props.children</code> 可以存取子 Route 的 Component。</li>
<li>components<br>同 component，只是它的參數是 JSON，且可一次設定多個 Component。<br>父 Route 的 Component 中使用 <code>this.props.[key]</code> 可以存取子 Route 的對應 key 值 Component。</li>
<li>getComponent<br>參數：location, callback<br>同 component，但是是非同步函數。</li>
<li>children<br>跟一般元件的 children 一樣是用來傳入子元件的，同樣地，也可以將子元件用兩個 tag 括住。</li>
<li>onEnter<br>route 進入前調用。</li>
<li>onLeave<br>route 離開前調用。</li>
</ul>
</li>
<li>IndexRoute<br>當 URL 和父 route 的 path 一致時，會進入該父 route 的 IndexRoute。<br>屬性 (props)：除了沒 path 之外，與 Route 的 props 一樣。</li>
<li>PlainRoute<br>Route 的 JS 版本 (Route 是 JSX)。<br>屬性 (props)：除了列在下面的之外，與 Route 的 props 一樣。<ul>
<li>childRoutes<br>同 Route 的 children。</li>
<li>getChildRoutes<br>參數：location, callback<br>同 childRoutes，但是是非同步函數。</li>
<li>indexRoute<br>當 URL 和 PlainRoute 的 path 一致時，會進入該 PlainRoute 的 indexRoute。</li>
<li>getIndexRoute<br>參數：location, callback<br>同 indexRoutes，但是是非同步函數。</li>
</ul>
</li>
<li>Redirect<br>不改變舊的 URL，重定向到其他 route。<br>屬性 (props)：<ul>
<li>from<br>重定向的來源路徑。</li>
<li>to<br>重定向的目標路徑。</li>
<li>query<br>用 JSON 指定目標路徑的 query。</li>
</ul>
</li>
<li>IndexRedirect<br>將 Redirect 套用在父 route 時使用。<br>屬性 (props)：除了沒 from 之外，與 Redirect 的 props 一樣。</li>
</ul>
</li>
<li>history<br>之前有提到 browserHistory 和 hashHistory，在這可以設定要使用哪一種。<br>EX：<br><code>history={browserHistory}</code></li>
<li>createElement<br>參數：Component, props<br>Route 渲染傳入的 Component 時會觸發。預設是傳入一個叫 createElement 的函數來處理。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">Component, props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>如果要在 Route 以及 Component 間插入 middleware (EX：Relay) 就需要改寫這函數了。</p>
<ul>
<li>onError<br>參數： error<br>用來處理 Route 拋出的錯誤。</li>
<li><p>onUpdate<br>參數：無<br>當 URL 改變時會觸發。</p>
<ul>
<li>Link<br>類似 <code>&lt;a&gt;</code>，觸發 URL 以及 Component 的切換。<blockquote>
<p>洨知識：<br>URL 分成七部份：協議 (EX:https)、域名 (這個還可以在細分成頂級、次級…)、port、相對路徑、資源、query (?，就是 get 方法的參數)、錨點 (#)。</p>
</blockquote>
</li>
</ul>
<p>和 <code>&lt;a&gt;</code> 的 <code>href</code> 不同，協議、域名、port 在 Link 中都是不能更改的。<br>屬性 (props)：</p>
</li>
<li>to<br>似 <code>&lt;a&gt;</code> 的 <code>href</code> 屬性中相對路徑 + 資源的部份，但須是 Router 有定義的路徑。</li>
<li>query<br>似 <code>&lt;a&gt;</code> 的 <code>href</code> 屬性中 query 的部份。<br>PS. 可以寫在 to 中。</li>
<li>hash<br>似 <code>&lt;a&gt;</code> 的 <code>href</code> 屬性中錨點的部份。<br>要補上 <code>#</code><br>PS. React Router 還不能自動滾動頁面，所以錨點不能滾動頁面，但還是可以 hashHistory。</li>
<li>params<br>設定 Route 的參數。</li>
<li>state</li>
<li>activeClassName<br>設定 active 的 ClassName 以套用 css。<br>PS. 若 Link to 的對象 URL 等同於當前 URL 或其前綴則稱為 active 狀態。</li>
<li>activeStyle<br>設定 active 的 Style。</li>
<li>onClick<br>參數：e<br>點擊時觸發的事件。</li>
<li>其他<br><code>&lt;a&gt;</code> 可以使用的屬性 <code>&lt;link&gt;</code> 也可以使用，並直接套用到 <code>&lt;a&gt;</code> 上去。<ul>
<li>IndexLink<br>若是想要連到 IndexRoute 而使用 Link，那麼在同層 Route 中此 Link 將會是  active 狀態，因為當前 URL 必為同層 Route URL 的前綴。此時可使用 IndexLink，在同層 Route 就不會是 active 的狀態了。<br>PS. to IndexRoute 時才有此效果。</li>
<li>RouterContext</li>
</ul>
</li>
</ul>
<h2 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h2><h3 id="main-jsx-程式進入點"><a href="#main-jsx-程式進入點" class="headerlink" title="main.jsx (程式進入點)"></a>main.jsx (程式進入點)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./routes.jsx'</span></div><div class="line"><span class="keyword">import</span> &#123;Router, browserHistory, hashHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line">ReactDOM.render((</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">children</span>=<span class="string">&#123;routes&#125;</span>  <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;/</span>&gt;</span></span></div><div class="line">), document.getElementById('root'));</div></pre></td></tr></table></figure>
<h3 id="routes-jsx"><a href="#routes-jsx" class="headerlink" title="routes.jsx"></a>routes.jsx</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Route, IndexRoute&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.jsx'</span>;</div><div class="line"><span class="keyword">import</span> APage <span class="keyword">from</span> <span class="string">'A/APage.jsx'</span>;</div><div class="line"><span class="keyword">import</span> BPage <span class="keyword">from</span> <span class="string">'B/BPage.jsx'</span>;</div><div class="line"><span class="keyword">import</span> CPage <span class="keyword">from</span> <span class="string">'C/CPage.jsx'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (</div><div class="line">  &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">    &lt;IndexRoute component=&#123;CounterPage&#125;/&gt;</div><div class="line">    &lt;Route path="counter" component=&#123;CounterPage&#125;/&gt;</div><div class="line">    &lt;Route path="about/:name" component=&#123;AboutPage&#125;/&gt;</div><div class="line">    &lt;Route path="todo" component=&#123;TodoPage&#125;/&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="App-jsx"><a href="#App-jsx" class="headerlink" title="App.jsx"></a>App.jsx</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;Link&#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'vendor/vendor.scss'</span>);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        React Example</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/counter'</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span> Counter Page<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/about/corn'</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span> About Page<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/todo'</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>Todo Page<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><h2 id="概念-Flux"><a href="#概念-Flux" class="headerlink" title="概念 - Flux"></a>概念 - Flux</h2><p>Flux 是 Facebook 內部搭配 React 使用的一種概念、架構、設計模式，而不是框架或函式庫。<br>主要理念是單向資料流，如下圖：<br><img src="http://3.bp.blogspot.com/-wi_Qfey7moY/VRf0yWh83qI/AAAAAAAAIsE/-5DrdmG3ZbQ/s1600/Image_2015032935.png" alt=""><br>下面就來說明個別的功能。</p>
<h3 id="Actions-amp-Action-Creators"><a href="#Actions-amp-Action-Creators" class="headerlink" title="Actions &amp; Action Creators"></a>Actions &amp; Action Creators</h3><p>Action Creators 是輔助函式，可以在 View 呼叫，進而把 Actions 和 data 發送給 Dispatcher。Actions 實際上是透過 Dispatcher 來分派 data 的。<br>Actions 是唯一可以改變 Stores 裡面的數據的方法。</p>
<h3 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h3><p>接收 Actions 以及分派 payloads (要傳遞的資料) 到所有被註冊的回呼函式(callback)。<br>一個專案只能有一個 Dispatcher。</p>
<h3 id="Stores"><a href="#Stores" class="headerlink" title="Stores"></a>Stores</h3><p>管理 state 和處理邏輯 (接收資料的方法和被註冊到 Dispatcher 的回呼函式) 的容器。</p>
<h3 id="Controller-Views"><a href="#Controller-Views" class="headerlink" title="Controller Views"></a>Controller Views</h3><p>負責管理 state 的 React Component。從 Stores 接受 state，並把 state 透過 props 往下傳遞到子 Component。</p>
<p>以下這張圖說明的很清楚：<br><img src="https://imazole.files.wordpress.com/2014/11/fluxe6a682e5bfb5.png" alt=""><br>英文好的可以看這張：<br><img src="http://i.imgur.com/duZH2Sz.png" alt=""></p>
<h3 id="使用-Flux-的好處"><a href="#使用-Flux-的好處" class="headerlink" title="使用 Flux 的好處"></a>使用 Flux 的好處</h3><p>Component 之間有共用的狀態資料儲存地。<br>不使用 Flux 的話，state 儲存在各自的 this.state 中。若不同 Component 之間想互相通知 state 的改變的話，需要一層一層傳遞 callback，很繁雜。</p>
<h2 id="Redux-概述"><a href="#Redux-概述" class="headerlink" title="Redux 概述"></a>Redux 概述</h2><ul>
<li>是 JS 的狀態容器，提供可預測的狀態管理</li>
<li>由 Flux 演變而來，但避開了 Flux 的複雜性，單純易用</li>
<li>Redux 已納入 Facebook 官方項目，成為前端狀態管理的主流解決方案</li>
<li>跟 React 沒有相依關係，可以單獨使用或搭配其他前端框架使用</li>
</ul>
<h2 id="Redux-三大原則"><a href="#Redux-三大原則" class="headerlink" title="Redux 三大原則"></a>Redux 三大原則</h2><ol>
<li>單一資料來源</li>
<li>state 是唯讀的</li>
<li>使用純函數來執行 state 的修改</li>
</ol>
<h2 id="Flux-和-Redux-的異同"><a href="#Flux-和-Redux-的異同" class="headerlink" title="Flux 和 Redux 的異同"></a>Flux 和 Redux 的異同</h2><h3 id="Action-Creator-amp-Actions"><a href="#Action-Creator-amp-Actions" class="headerlink" title="Action Creator &amp; Actions"></a>Action Creator &amp; Actions</h3><ul>
<li>Flux：經由 Action creator 直接建立 action 並且 dispatch 出去。</li>
<li>Redux：Action Creator 只會產生一個純粹的 javascript object，你要自己 dispatch 出去。</li>
</ul>
<h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><ul>
<li>Flux：沒有 Reducer。</li>
<li>Redux：給你現在的狀態跟要執行的動作，傳回一個新的狀態。</li>
</ul>
<h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><ul>
<li>Flux：有多個 Stores。</li>
<li>Redux：只有一個 Store。dispatch 這個動作是用 store 來達成，把原本的 Dispatcher 這個東西拿掉了。</li>
</ul>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TODO = <span class="string">'ADD_TODO'</span>;</div><div class="line"></div><div class="line">action = &#123;</div><div class="line">  type: ADD_TODO,</div><div class="line">  text</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Action-Creator"><a href="#Action-Creator" class="headerlink" title="Action Creator"></a>Action Creator</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// actions/TodoActions</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TODO = <span class="string">'ADD_TODO'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span>&#123;</div><div class="line">    type: ADD_TODO,</div><div class="line">    text</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Reducer-1"><a href="#Reducer-1" class="headerlink" title="Reducer"></a>Reducer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// reducers/AppReducers</span></div><div class="line"><span class="keyword">import</span> &#123;ADD_TODO&#125; <span class="keyword">from</span> <span class="string">'actions/TodoActions'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> ADD_TODO:</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">        ...state,</div><div class="line">        &#123;</div><div class="line">          text: action.text,</div><div class="line">          completed: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">      ];</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Store-1"><a href="#Store-1" class="headerlink" title="Store"></a>Store</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.jsx</span></div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'containers/App'</span></div><div class="line"><span class="keyword">import</span> AppReducers <span class="keyword">from</span> <span class="string">'reducers/AppReducers'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(AppReducers, <span class="built_in">window</span>.devToolsExtension &amp;&amp; <span class="built_in">window</span>.devToolsExtension());</div><div class="line"></div><div class="line"><span class="keyword">let</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  rootElement</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// containers/App</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; addTodo, toggleTodo &#125; <span class="keyword">from</span> <span class="string">'actions/TodoActions'</span></div><div class="line"><span class="keyword">import</span> AddTodo <span class="keyword">from</span> <span class="string">'components/Todo/AddTodo'</span></div><div class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'components/Todo/TodoList'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; dispatch, todos &#125; = <span class="keyword">this</span>.props</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">AddTodo</span> <span class="attr">onAddClick</span>=<span class="string">&#123;text</span> =&gt;</span> dispatch(addTodo(text))&#125;&gt;<span class="tag">&lt;/<span class="name">AddTodo</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">TodoList</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(state =&gt; state)(App);</div></pre></td></tr></table></figure>
<hr>
<p>本篇有許多地方尚未寫的很完整，不過最近繁忙，會抽空儘快補上。</p>
<p>這篇就這樣告一段落囉，<a href="">下篇</a> 講的是 React Native。如果有興趣可以繼續收看~</p>
<p>這篇會不定期更新，如果有打錯或有任何疑問都歡迎留言告知喔~<br>我們下篇再見~</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;React Router&lt;/li&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="教學" scheme="https://j6qup3.github.io/categories/%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="React" scheme="https://j6qup3.github.io/tags/React/"/>
    
      <category term="教學" scheme="https://j6qup3.github.io/tags/%E6%95%99%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>猴子也能看懂的 React 教學 - 3 - Webpack 建置指南</title>
    <link href="https://j6qup3.github.io/2016/08/15/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-3/"/>
    <id>https://j6qup3.github.io/2016/08/15/猴子也能看懂的-React-教學-3/</id>
    <published>2016-08-14T20:13:23.000Z</published>
    <updated>2016-08-29T05:44:49.866Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt -->
<p>這篇會講</p>
<hr>
<!-- toc -->
<hr>
<h1 id="安裝-Webpack"><a href="#安裝-Webpack" class="headerlink" title="安裝 Webpack"></a>安裝 Webpack</h1><p>存於單一專案：<br><code>npm install --save-dev webpack</code></p>
<p>全域，存於本機：<br><code>npm install -g webpack</code></p>
<p>按照需求擇一安裝即可，等待安裝的同時，來說說什麼是 Webpack。</p>
<h1 id="為什麼要用-Webpack？"><a href="#為什麼要用-Webpack？" class="headerlink" title="為什麼要用 Webpack？"></a>為什麼要用 Webpack？</h1><ul>
<li>兼容 CommonJS &amp; AMD &amp; ES6 模組規範</li>
<li>Bundle 效率高</li>
<li>JS 擴充語法的編譯自動化 (JSX, Coffee Script, TypeScript…)</li>
<li>編譯 sass, less</li>
<li>將資源 (css, img, font…) 包入 JS 內</li>
<li>JS 程式碼分散封裝</li>
<li>可用的擴充 plugin 很多</li>
</ul>
<h1 id="環境配置"><a href="#環境配置" class="headerlink" title="環境配置"></a>環境配置</h1><h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><p>首先，在 NPM 專案的根目錄建立一個名叫 <strong>webpack.config.js</strong> 的檔案，並輸入以下內容：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>所有設定將打在 module.exports 中輸出。</p>
<h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><p>說明：Webpack 會將每個 entry 文件編譯打包。當然，其中 require 的文件 (js, css, img) 會一起被打包進來。<br>格式：字串或字串陣列 （一個檔案對應一個字串，為 JS 檔）</p>
<p>EX：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">entry: [</div><div class="line">  <span class="string">'./main.jsx'</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>說明：打包後生成的檔案路徑。<br>格式：物件<br>屬性：</p>
<ul>
<li>path<br>說明：打包生成的目錄<br>格式：字串</li>
<li>filename<br>說明：生成的 js 檔名<br>格式：字串</li>
<li>publicPath<br>說明：CSS 打包時修改的引用檔案路徑<br>格式：字串</li>
</ul>
<p>EX：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">  <span class="comment">// path.join =&gt; 兩個參數，依當前的作業系統幫你在中間加 '/' 或 '\'，然後串接</span></div><div class="line">  path: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">  filename: <span class="string">'compiled.js'</span>,</div><div class="line">  publicPath: <span class="string">'/'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h4><p>說明：require 相關設置。<br>格式：物件<br>屬性：</p>
<ul>
<li>root<br>說明：require 的根目錄 (模組的引用不受影響)<br>格式：字串或字串陣列</li>
<li>extensions<br>說明：require 可省略的副檔名<br>格式：字串或字串陣列</li>
<li>ailas<br>說明：屬性對應的值會形成 ailas 對應。<code>ailas: { a:&#39;b&#39; }</code> =&gt; <code>require(&#39;a&#39;)</code> 同於 <code>require(&#39;b&#39;)</code><br>格式：物件</li>
</ul>
<p>EX：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">  <span class="comment">// path.resolve 可以傳入任意數量的字串，會將他們以類似 cd 的方式一一執行，並回傳最後的絕對路徑</span></div><div class="line">  root: [path.resolve(__dirname, <span class="string">'src'</span>)],</div><div class="line">  extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>,<span class="string">'css'</span>, <span class="string">'.scss'</span>],</div><div class="line">  ailas: &#123; a:<span class="string">'b'</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><p>格式：物件<br>屬性：</p>
<ul>
<li>loaders<br>說明：entry 及 require 到的檔都會依此轉換成 JS，anything to JS<br>格式：物件陣列（由下往上依序轉換）<br>屬性：<ul>
<li>test<br>說明：指定目標檔案的檔名<br>格式：<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F#.E5.9F.BA.E6.9C.AC.E8.AF.AD.E6.B3.95" target="_blank" rel="external">正則表達式</a></li>
<li>loader<br>說明：指定使用的 loader<br>格式：字串或字串陣列 （loader 語法）（由右往左依序轉換）</li>
<li>include<br>說明：白名單，只處理的目錄<br>格式：字串或字串陣列</li>
<li>exclude<br>說明：黑名單，忽略、不處理的目錄<br>格式：字串或字串陣列</li>
</ul>
</li>
</ul>
<p>EX：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  loaders: [&#123;</div><div class="line">    <span class="comment">// '/' 是 JS 正則表達式標記，'.' 是正則表達式關鍵字，所以前面要加個 '\' 讓正則表達式以字元方式處理，'|' 是 '或' 的意思，'$' 是字串結束符號</span></div><div class="line">    <span class="comment">// 整體意思是找檔名末尾是 .js 或 .jsx 的</span></div><div class="line">    test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">    <span class="comment">// '-loader' 可省略，即 'babel'</span></div><div class="line">    loader: <span class="string">'babel-loader'</span>,</div><div class="line">	<span class="comment">// node_modules 的 JS 檔必定是瀏覽器原本就能吃的 ES5，不需要經過編譯，所以忽略以增加效率和避免錯誤</span></div><div class="line">    exclude: <span class="regexp">/node_modules/</span></div><div class="line">  &#125;, &#123;</div><div class="line">    test: <span class="regexp">/\.css$/</span>,</div><div class="line">    <span class="comment">// '-loader' 可省略，'!' 表示 loader 串聯順序（由右往左依序轉換），'？' 表示傳送請求參數（類似 get）來進階設定</span></div><div class="line">    <span class="comment">// loader 串聯亦可用陣列表示：</span></div><div class="line">    <span class="comment">// loader: [ 'style-loader' , 'css-loader?sourceMap' ]</span></div><div class="line">    loader: <span class="string">'style-loader!css-loader?sourceMap'</span></div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><p>說明：設置 eval 或 SourceMap 屬性，debug 用<br>格式：字串<br>種類：</p>
<ul>
<li><code>&#39;eval&#39;</code></li>
<li><code>&#39;source-map&#39;</code></li>
<li><code>&#39;hidden-source-map&#39;</code></li>
<li><code>&#39;inline-source-map&#39;</code></li>
<li><code>&#39;eval-source-map&#39;</code></li>
<li><code>&#39;cheap-source-map&#39;</code></li>
<li><code>&#39;cheap-module-source-map&#39;</code></li>
</ul>
<p>可以混著用，個別的介紹請看<a href="https://segmentfault.com/a/1190000004280859" target="_blank" rel="external">這裡</a>，<del>我懶的打字</del><br>EX：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool: <span class="string">'cheap-module-eval-source-map'</span></div></pre></td></tr></table></figure></p>
<h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>說明：插件配置<br>格式：物件或物件陣列，通常以 <code>new webpack.XXXPlugin()</code> 產生物件</p>
<p>EX：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">  <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">    React: <span class="string">'react'</span>,</div><div class="line">    ReactDOM:<span class="string">'react-dom'</span></div><div class="line">  &#125;)</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>嘛，大致上是這樣，如果對 Webpack 配置有興趣可看<a href="http://www.jianshu.com/p/271f93b8c051" target="_blank" rel="external">這裡</a>。</p>
<h2 id="推薦配置"><a href="#推薦配置" class="headerlink" title="推薦配置"></a>推薦配置</h2><h3 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h3><p> 懶人包，<del>全裝下去 94 狂</del><br> <code>npm install --save-dev babel-loader style-loader css-loader sass-loader less-loader url-loader</code></p>
<ul>
<li><p><strong>babel-loader</strong><br>功能：自動編譯 JSX 或 JS 檔 （require 可載入 JSX 了）<br>安裝：<code>npm install --save-dev babel-loader</code><br>示範：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">  loader: <span class="string">'babel'</span>,</div><div class="line">  exclude: <span class="regexp">/node_modules/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>style-loader</strong><br>功能：自動將 CSS 檔的內容插入到頁面有 require CSS 的地方，並用 style 包住 （require 可載入 CSS 了）<br>安裝：<code>npm install --save-dev style-loader</code><br>示範：見下面 css-loader 的示範</p>
</li>
<li><p><strong>css-loader</strong><br>功能：自動處理 CSS 內的 <code>url</code> 和 <code>@import</code> 的路徑轉換，可以傳入 sourceMap 參數以便 debug<br>安裝：<code>npm install --save-dev css-loader</code><br>示範：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.css$/</span>,</div><div class="line">  loader: <span class="string">'style!css?sourceMap'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>sass-loader</strong><br>功能：自動編譯 sass 檔成 CSS （require 可載入 sass 了），可以傳入 sourceMap 參數以便 debug<br>安裝：<code>npm install --save-dev sass-loader</code><br>示範：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.scss$/</span>,</div><div class="line">  loader: <span class="string">'style!css?sourceMap!sass?sourceMap'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>less-loader</strong><br>功能：自動編譯 less 檔成 CSS （require 可載入 less 了），可以傳入 sourceMap 參數以便 debug<br>安裝：<code>npm install --save-dev less-loader</code><br>示範：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.less$/</span>,</div><div class="line">  loader: <span class="string">'style!css?sourceMap!less?sourceMap'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>url-loader</strong><br>功能：自動將圖片轉成 Data URL<br>安裝：<code>npm install --save-dev url-loader</code><br>示範：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.(jpe?g|JPE?G|png|PNG|gif|GIF|svg|SVG|woff|woff2|eot|ttf)(\?v=\d+\.\d+\.\d+)?$/</span>,</div><div class="line">  loader: <span class="string">'url?limit=1024&amp;name=[sha512:hash:base64:7].[ext]'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="plugins-1"><a href="#plugins-1" class="headerlink" title="plugins"></a>plugins</h3><ul>
<li><p><strong>HotModuleReplacementPlugin</strong><br>功能：<strong>Hot Module Replacement</strong>，詳細會在<a href="#Hot-Module-Replacement">底下</a>提到。<br>示範：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div></pre></td></tr></table></figure>
</li>
<li><p><strong>ProvidePlugin</strong><br>功能：幫你 require，<code>new webpack.ProvidePlugin({a: &#39;b&#39;})</code> =&gt; 程式碼有找到 a 字串就載入 b module，就不用手動 require<br>示範：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">$: <span class="string">'jquery'</span>,</div><div class="line">   React: <span class="string">'react'</span>,</div><div class="line">   ReactDOM:<span class="string">'react-dom'</span></div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="兼容-IE"><a href="#兼容-IE" class="headerlink" title="兼容 IE"></a>兼容 IE</h3><p>說到 IE，一堆工程師的頭都痛了。<br>但 <strong>eventsource-polyfill</strong> 可以讓 Webpack 兼容 IE！<br>修改 <strong>webpack.config.js</strong> 的 entry：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">entry: [</div><div class="line">  <span class="comment">// 一定要在前面</span></div><div class="line">  <span class="string">'eventsource-polyfill'</span>,</div><div class="line">  <span class="string">'./src/main.jsx'</span>,</div><div class="line">],</div></pre></td></tr></table></figure></p>
<h3 id="webpack-config-js-配置範例"><a href="#webpack-config-js-配置範例" class="headerlink" title="webpack.config.js 配置範例"></a>webpack.config.js 配置範例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">  entry: [</div><div class="line">    <span class="string">'eventsource-polyfill'</span>,</div><div class="line">    <span class="string">'./main.jsx'</span></div><div class="line">  ],</div><div class="line"></div><div class="line">  output: &#123;</div><div class="line">    path: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    filename: <span class="string">'compiled.js'</span>,</div><div class="line">    publicPath: <span class="string">'/'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  resolve: &#123;</div><div class="line">    root: [</div><div class="line">      path.join(__dirname, <span class="string">'src'</span>)</div><div class="line">    ],</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>,<span class="string">'css'</span>, <span class="string">'.scss'</span>]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [&#123;</div><div class="line">      test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">      loader: <span class="string">'babel'</span>,</div><div class="line">      exclude: <span class="regexp">/node_modules/</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.css$/</span>,</div><div class="line">      loader: <span class="string">'style!css?sourceMap'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.scss$/</span>,</div><div class="line">      loader: <span class="string">'style!css?sourceMap!sass?sourceMap'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.(jpe?g|JPE?G|png|PNG|gif|GIF|svg|SVG|woff|woff2|eot|ttf)(\?v=\d+\.\d+\.\d+)?$/</span>,</div><div class="line">      loader: <span class="string">'url?limit=1024&amp;name=[sha512:hash:base64:7].[ext]'</span></div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  devtool: <span class="string">'cheap-module-eval-source-map'</span>,</div><div class="line"></div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">	  $: <span class="string">'jquery'</span>,</div><div class="line">      React: <span class="string">'react'</span>,</div><div class="line">      ReactDOM:<span class="string">'react-dom'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="Webpack-Express"><a href="#Webpack-Express" class="headerlink" title="Webpack + Express"></a>Webpack + Express</h1><h2 id="什麼是-Express？"><a href="#什麼是-Express？" class="headerlink" title="什麼是 Express？"></a>什麼是 Express？</h2><blockquote>
<p>Express 是最小又靈活的 Node.js Web 應用程式架構，為 Web 與行動式應用程式提供一組健全的特性。</p>
<p>– 仁自 <a href="http://expressjs.com/zh-tw/" target="_blank" rel="external">Express 官網</a></p>
</blockquote>
<p>簡而言之，Express 是目前使用上最穩定且最廣泛的輕量級開發框架，而且是 Node.js 官方唯一推薦的框架。<br>因為 webpack 本身只是 bundle 工具，沒有 server 功能，需要一個 server。<br>然而，要將 webpack 跟 Express 結合，需要使用 <strong>webpack-dev-middleware</strong> 或 <strong>webpack-dev-server</strong>。<del>不然只能同時開兩個 terminal，一個跑 webpack，一個跑 Express server</del></p>
<p>不想使用 Express 的話可以<a href="#牛刀小試">跳過</a>。</p>
<h2 id="什麼是-webpack-dev-middleware-amp-webpack-dev-server？"><a href="#什麼是-webpack-dev-middleware-amp-webpack-dev-server？" class="headerlink" title="什麼是 webpack-dev-middleware &amp; webpack-dev-server？"></a>什麼是 webpack-dev-middleware &amp; webpack-dev-server？</h2><p>webpack-dev-middleware 可讓 webpack 被 Express app 或是其他可使用 middleware 的框架所使用。<br>webpack-dev-server 本身就是小型的 Express server，簡單來說整合了 Express 和 webpack-dev-middleware。<br>webpack-dev-server 方便架設，但彈性較少，無法跟現有的 Express app 結合，且只能用 Express。</p>
<p>所以我採用了 Express + webpack-dev-middleware。想用 webpack-dev-server 的話可以參考下<a href="https://medium.com/html-test/webpack-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B-585f2bc952b9#8ecf" target="_blank" rel="external">這裡</a>。</p>
<h2 id="安裝-Express-amp-webpack-dev-middleware"><a href="#安裝-Express-amp-webpack-dev-middleware" class="headerlink" title="安裝 Express &amp; webpack-dev-middleware"></a>安裝 Express &amp; webpack-dev-middleware</h2><p><code>npm install --save express</code><br><code>npm install --save-dev webpack-dev-middleware</code></p>
<h2 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h2><p>裝好之後要用 Express 寫個 server，套用 webpack-dev-middleware。<br>首先，在專案根目錄建一個 server.js （檔名隨意）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="comment">// 使用 express</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="comment">// 使用 webpack</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</div><div class="line"><span class="keyword">var</span> compiler = webpack(config);</div><div class="line"><span class="comment">// 將 webpack 傳入 webpack-dev-middleware 並套用至 app，同時傳入屬性，webpack 就可以被加載進來</span></div><div class="line">app.use(<span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)(compiler, &#123;</div><div class="line">  noInfo: <span class="literal">true</span>,</div><div class="line">  publicPath: config.output.publicPath</div><div class="line">&#125;));</div><div class="line"><span class="comment">// 不管你打什麼都會載入 index.html 啦</span></div><div class="line">app.get(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.sendFile(path.join(__dirname, <span class="string">'index.html'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 監聽 8000 port，並顯示錯誤或成功</span></div><div class="line">app.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening at http://localhost:8000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="Hot-Module-Replacement"><a href="#Hot-Module-Replacement" class="headerlink" title="Hot Module Replacement"></a>Hot Module Replacement</h2><h3 id="這是神馬？"><a href="#這是神馬？" class="headerlink" title="這是神馬？"></a>這是神馬？</h3><p>中文稱為熱置換，意思是你修改任意一個檔案並儲存後就會自行編譯打包 (webpack –watch)，然後更新瀏覽器畫面 (<a href="http://blog.qiji.tech/archives/2878#BrowsersyncWebpack" target="_blank" rel="external">Browsersync</a>)，而且只會 reload 更新的一部份而不會全部 reload，全部 reload 效率低，且會導致狀態的遺失。</p>
<p>webpack –watch + Browsersync 還是無法避免全部 reload，無法做到 HMR，所以，我們得用 <strong>react-hot-loader</strong> 或 <strong>webpack-hot-middleware</strong>。</p>
<p>react-hot-loader 是 webpack-dev-server 的衍生套件，webpack-hot-middleware 則是 webpack-dev-middleware 的衍生套件。請依環境選裝。</p>
<h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>二選一</p>
<ul>
<li><code>npm install --save-dev react-hot-loader</code></li>
<li><code>npm install --save-dev webpack-hot-middleware</code></li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li><p>react-hot-loader<br>修改 <strong>webpack.config.js</strong> 的 entry：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">entry: [</div><div class="line">  <span class="comment">// 一定要在前面</span></div><div class="line">  <span class="string">'webpack-dev-server/client?http://0.0.0.0:3000'</span>,</div><div class="line">  <span class="string">'webpack/hot/only-dev-server'</span>,</div><div class="line">  <span class="string">'./main.jsx'</span>,</div><div class="line">],</div></pre></td></tr></table></figure>
</li>
<li><p>webpack-hot-middleware<br>修改 <strong>webpack.config.js</strong> 的 entry：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">entry: [</div><div class="line">  <span class="comment">// 一定要在前面</span></div><div class="line">  <span class="string">'webpack-hot-middleware/client'</span>,</div><div class="line">  <span class="string">'./main.jsx'</span>,</div><div class="line">],</div></pre></td></tr></table></figure>
</li>
</ul>
<p>並在 <strong>server.js</strong> 中載入 webpack-dev-middleware 的後面再加一段：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 將 webpack 傳入 webpack-hot-middleware 並套用至 app，就可達到 HMR 的效果</span></div><div class="line">app.use(<span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)(compiler));</div></pre></td></tr></table></figure></p>
<p>無論用哪個都別忘了在 webpack.config.dev 加 <code>new webpack.HotModuleReplacementPlugin()</code> 才有 HMR 的效果喔~</p>
<h1 id="牛刀小試"><a href="#牛刀小試" class="headerlink" title="牛刀小試"></a>牛刀小試</h1><p>Webpack 搞了這麼久，趕快體驗一下他帶來的方便吧！</p>
<p>不過接下來至少還要改兩個檔才能開始測試 webpack。<br>這邊接序第二篇的環境建置，忘記的可以<a href="/2016/08/10/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-2/#Component">回去</a>看一下。</p>
<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><p>這個檔必須是你用的 server 能讀取到的檔案<br>(若你是用 Express + webpack-dev-middleware 並實作了 server.js，那應該可在 server.js 內看到 sendFile 的對象，像我剛剛是在 server.js 中打 index.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> C8763 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./compiled.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>有沒有覺得 <code>compiled.js</code> 這路徑很熟悉？<br>沒錯，它就是 <strong>webpack.config.js</strong> 中 output 設定的 bundle 輸出路徑。也就是說，載入這個 js 就好啦！<br>第七行 div 是讓 JSX 插入用的，id 可以自取。</p>
<h2 id="main-jsx"><a href="#main-jsx" class="headerlink" title="main.jsx"></a>main.jsx</h2><p>有沒有覺得 <code>main.jsx</code> 這路徑也很熟悉？<br>沒錯，它就是 <strong>webpack.config.js</strong> 中 entry 設定的 bundle 進入點。<br>可以開始寫 JSX 囉。<br>以下只是範例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"><span class="keyword">import</span> Demo <span class="keyword">from</span> <span class="string">'./Demo.jsx'</span></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</div></pre></td></tr></table></figure></p>
<p>document.getElementById(‘root’) 的 id 必須和 index.html 中 div 的 id 一致。</p>
<h2 id="webpack-建置"><a href="#webpack-建置" class="headerlink" title="webpack 建置"></a>webpack 建置</h2><ul>
<li><p>如果你是用 Express + webpack-dev-middleware 並實作了 server.js：<br><code>node server.js</code></p>
</li>
<li><p>如果是用 webpack-dev-server：<br><code>webpack-dev-server</code></p>
</li>
<li><p>如果都沒用，只用 webpack：<br><code>webpack --watch</code><br>PS. 至少要找一個 server 並啟動它喔 ~</p>
</li>
</ul>
<p>然後只要讓瀏覽器連到 index.html 就可以看到 JSX 自動編譯，即時變更網頁內容了！</p>
<hr>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><h2 id="環境配置懶人包"><a href="#環境配置懶人包" class="headerlink" title="環境配置懶人包"></a>環境配置懶人包</h2><ul>
<li><code>npm install --save-dev webpack babel-loader css-loader style-loader sass-loader less-loader url-loader express webpack-dev-middleware webpack-hot-middleware</code><ul>
<li><code>npm install --save-dev babel-loader css-loader style-loader sass-loader less-loader url-loader</code> loaders</li>
<li><code>npm install --save express</code> Express</li>
<li><code>npm install --save-dev webpack-dev-middleware</code> webpack-dev-middleware</li>
<li><code>npm install --save-dev webpack-hot-middleware</code> HMR - webpack-dev-middleware</li>
<li><code>npm install --save-dev react-hot-loader</code> HMR - webpack-dev-server</li>
</ul>
</li>
</ul>
<hr>
<p>Webpack 篇就這樣告一段落囉，<a href="/2016/08/19/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-4/">下篇</a> 講的是 <strong>React Router</strong> 以及 <strong>Redux</strong> 框架。如果有興趣可以繼續收看~</p>
<p>這篇會不定期更新，如果有打錯或有任何疑問都歡迎留言告知喔~<br>我們下篇再見~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;環境配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Webpack&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="教學" scheme="https://j6qup3.github.io/categories/%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="React" scheme="https://j6qup3.github.io/tags/React/"/>
    
      <category term="教學" scheme="https://j6qup3.github.io/tags/%E6%95%99%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>猴子也能看懂的 React 教學 - 2 - 開始打 code 啦~</title>
    <link href="https://j6qup3.github.io/2016/08/10/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-2/"/>
    <id>https://j6qup3.github.io/2016/08/10/猴子也能看懂的-React-教學-2/</id>
    <published>2016-08-09T17:14:20.000Z</published>
    <updated>2016-08-30T14:49:41.892Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt -->
<p>這篇就會開始打 code 囉。<br>不過首先先補充一些重要的概念。</p>
<hr>
<!-- toc -->
<hr>
<h1 id="ES5-VS-ES6"><a href="#ES5-VS-ES6" class="headerlink" title="ES5 VS ES6"></a>ES5 VS ES6</h1><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>有接觸過物件導向程式語言的對 <strong>class</strong> 應該不陌生吧？JS 雖然是以函數導向為主，但在 ES6 中新增了 class 的<strong>語法糖</strong>，繼承和建構子之類的 class 基礎語法都可以使用，詳細使用方法和功能可以看<a href="http://www.infoq.com/cn/articles/es6-in-depth-classes" target="_blank" rel="external">這篇</a>。</p>
<h3 id="React-createClass-VS-extends-React-Component"><a href="#React-createClass-VS-extends-React-Component" class="headerlink" title="React.createClass VS extends React.Component"></a>React.createClass VS extends React.Component</h3><p>React 中可以利用繼承 <strong>React.Component</strong> 來建立 Component：<br>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</div><div class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;,</div><div class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;,</div><div class="line">  render: fucntion() &#123;</div><div class="line">  	<span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  a() &#123;...&#125;</div><div class="line">  b() &#123;...&#125;</div><div class="line">  render() &#123;</div><div class="line">  	<span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>React.createClass 是傳入一個物件，其屬性值可以是函數或值，換成 class 就可以直接宣告函數或變數，看起來比較直觀。<br>另外，ES6 可以把 React component 生命周期之一 <strong>componentWillMount</strong> 內的程式碼放在建構子 (<strong>constructor</strong>) 中。</p>
<h3 id="Props-amp-State"><a href="#Props-amp-State" class="headerlink" title="Props &amp; State"></a>Props &amp; State</h3><p>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</div><div class="line">  getDefaultProps: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      c8763: <span class="number">87</span>,</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  propTypes: &#123;</div><div class="line">    c8763: React.PropTypes.number.isRequired,</div><div class="line">  &#125;,</div><div class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      a: <span class="keyword">this</span>.props.c8763,</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  render: fucntion() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">    c8763: <span class="number">87</span>,</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    c8763: React.PropTypes.number.isRequired,</div><div class="line">  &#125;;</div><div class="line">  state = &#123;</div><div class="line">    a: <span class="keyword">this</span>.props.c8763,</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">  	<span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的範例顯示出 defaultProps 和 propTypes 設定上的差別，還有 state 初始化的異同。<br>另外也可以在建構子內初始化 state，如果要做一些運算的話這樣比較方便：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      a: <span class="keyword">this</span>.props.c8763,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Demo = React.createClass(&#123;</div><div class="line">  c8763: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;c8763: <span class="number">87</span>&#125;);</div><div class="line">  &#125;,</div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.c8763&#125;</span>&gt;</span>c8763<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  c8763() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;c8763: <span class="number">87</span>&#125;);</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">	    &#123;// 二選一&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.c8763.bind(this)&#125;</span>&gt;</span>c8763<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;function()</span> &#123;<span class="attr">this.c8763</span>()&#125;&#125;&gt;</span>c8763<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>React.createClass 預設會自動幫你 bind <code>this</code> 到 method，所以在 method 中使用的 this 都是指到該 Component (Demo) 的 instance，也就是 Virtural DOM 中的 tag。<br>但如果用 class extends React.Component 的話，不會自動 bind <code>this</code> 到 method，上面的例子如果直接在 button 的 onClick 呼叫 <code>this.c8763()</code> 的話，那麼 <code>c8763()</code> 內 <code>this.setState({c8763: 87});</code> 的 <code>this</code> 是指到 button 而非 Demo，所以我們要手動 bind 或是用匿名函數包住。<br>如果有多個 tag 用到這個 function 的話，可以在建構子中直接寫 <code>this.c8763 = this.c8763.bind(this);</code>，之後就可以直接調用 <code>this.c8763()</code> 了。</p>
<h2 id="模組規範的整合"><a href="#模組規範的整合" class="headerlink" title="模組規範的整合"></a>模組規範的整合</h2><p>ES6 兼容 CommonJS 和 AMD 這兩種著名的模組規範。</p>
<h3 id="require-VS-import"><a href="#require-VS-import" class="headerlink" title="require VS import"></a>require VS import</h3><p>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div></pre></td></tr></table></figure></p>
<p>require 是 CommonJS 引入模組的寫法，ES6 則走 Python 風，使用關鍵字 import，後面分號還可以省略，夠 Python 吧？</p>
<p>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'c8763.css'</span>);</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'c8763.css'</span>;</div></pre></td></tr></table></figure></p>
<p>直接引入一個文件，像是 css。</p>
<h3 id="module-exports-VS-export-default"><a href="#module-exports-VS-export-default" class="headerlink" title="module.exports VS export default"></a>module.exports VS export default</h3><p>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Demo = React.createClass(&#123; ... &#125;);</div><div class="line"><span class="built_in">module</span>.exports = Demo;</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>module.exports 是 CommonJS 模組輸出的寫法。與 import 相對，ES6 使用的是 export。default 則代表輸出只有它。<br>兩者後面可以接變數，函數，物件或 class。</p>
<h3 id="export-amp-import"><a href="#export-amp-import" class="headerlink" title="export &amp; import{}"></a>export &amp; import{}</h3><p>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// abc.jsx</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">'A'</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">'B'</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="string">'C'</span>;</div><div class="line"><span class="built_in">module</span>.exports = &#123;a, b, c&#125;;</div><div class="line"><span class="comment">// Demo.jsx</span></div><div class="line"><span class="keyword">var</span> abc = <span class="built_in">require</span>(<span class="string">'./abc.jsx'</span>);</div><div class="line"><span class="keyword">var</span> a = abc.a;</div><div class="line"><span class="keyword">var</span> c = abc.c;</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// abc.jsx</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">'A'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="string">'B'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> c = <span class="string">'C'</span>;</div><div class="line"><span class="comment">// Demo.jsx</span></div><div class="line"><span class="keyword">import</span> &#123;a, c&#125; <span class="keyword">from</span> <span class="string">'./abc.jsx'</span></div></pre></td></tr></table></figure></p>
<p>export 後面不加 default 的話代表輸出可能不只有它，會自動將所有 export 包成物件。<br>import 後面加大括號可以直接取出 module 的物件屬性，不過限制是存放的變數和物件屬性必須同名。</p>
<p>引入官方模組時也很好用，例如引入 react.Component：<br>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"><span class="keyword">var</span> createClass = React.createClass;</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div></pre></td></tr></table></figure></p>
<h2 id="Arrow-functions"><a href="#Arrow-functions" class="headerlink" title="Arrow functions"></a>Arrow functions</h2><p>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a =&gt; &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以把匿名函數的宣告精簡化，那個箭頭潮到出水。</p>
<h2 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h2><p>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="string">'c'</span>;</div><div class="line"><span class="keyword">var</span> c8763 = c + <span class="string">'8763'</span>;</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="string">'c'</span>;</div><div class="line"><span class="keyword">var</span> c8763 = <span class="string">`<span class="subst">$&#123;c&#125;</span>8763`</span>;</div></pre></td></tr></table></figure></p>
<h2 id="…"><a href="#…" class="headerlink" title="…"></a>…</h2><p>呃，先說好，我沒偷懶，這真的是語法，可能是開發者<del>很無言</del>想不到其他符號吧。<br>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;c8763: <span class="number">87</span>, xxx: <span class="string">'xx'</span>&#125;</div><div class="line"><span class="keyword">var</span> b = &#123;c8763: <span class="number">87</span>, xxx: <span class="string">'xx'</span>, www: <span class="string">'XD'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;c8763: <span class="number">87</span>, xxx: <span class="string">'xx'</span>&#125;</div><div class="line"><span class="keyword">var</span> b = &#123;...a, www: <span class="string">'XD'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>迭代展開物件的屬性及其值。很常被用來設定 tag 的屬性和重新產生 state。</p>
<h2 id="參數預設值"><a href="#參數預設值" class="headerlink" title="參數預設值"></a>參數預設值</h2><p>不傳參數時自動用預設值，很多語言都有這設計，ES6 終於也設計了這功能，有了這個就更加方便了。<br>ES5<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">c8763</span>)</span>&#123;</div><div class="line">  c8763 = c8763 || <span class="number">87</span>;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">c8763 = 87</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES5 和 ES6 對比詳細可以看<a href="http://blog.kdchang.cc/2016/04/04/react-react-native-es5-es6-cheat-sheet/" target="_blank" rel="external">這裡</a>。</p>
<hr>
<h1 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h1><h2 id="設計-Component"><a href="#設計-Component" class="headerlink" title="設計 Component"></a>設計 Component</h2><p>還記得上面有提到 ES6 可以使用 class 吧？React.Component 就是個 class，要建立 Component 第一步就是要<del>仁</del>繼承 (<strong>extends</strong>) 它。<br>首先，我們來看個範例：(JSX + ES6)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Demo.jsx</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>React.Component 已經有 constructor 了，如果要覆寫的話要記得在最前面加上 <code>super(props);</code> 喔~<br>render() 之前在說 Component 生命周期時有提到，必須覆寫，並回傳 JSX tag /<code>null</code>/<code>false</code><br>還有別忘記最前面要引入 react 模組 (require 或 import 皆可)</p>
<h2 id="使用-Component"><a href="#使用-Component" class="headerlink" title="使用 Component"></a>使用 Component</h2><p>上面我們知道設計 Component 的方法了，那要怎麼使用它呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.jsx</span></div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></div><div class="line"><span class="keyword">import</span> Demo <span class="keyword">from</span> <span class="string">'./Demo.jsx'</span></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</div></pre></td></tr></table></figure></p>
<p>這樣就會把 Component Demo 置於 id 為 root 的 tag 中。<br>接下來就是用 babel 把 main.jsx 編譯成 js。<br>如果有安裝 babel-cli 的讀者可以用以下指令：<br><code>babel main.jsx -o compiled.js</code><br>這樣只要引入 compiled.js 就行了。</p>
<p>EX：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>C8763<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"compiled.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>記得加 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code> 喔，不然 main.jsx 中的 <code>document.getElementById(&#39;root&#39;)</code> 會抓不到 tag。</p>
<h2 id="Component-疊疊樂"><a href="#Component-疊疊樂" class="headerlink" title="Component 疊疊樂"></a>Component 疊疊樂</h2><p>當然 Component 裡面也可以包 Component。<br>新增 CustomButton.jsx：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CustomButton.jsx</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span> C8763 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改 Demo.jsx：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Demo.jsx</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> CustomButton <span class="keyword">from</span> <span class="string">'./CustomButton.jsx'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CustomButton</span> /&gt;</span>;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>引入後直接將其當 tag 使用即可。<br>通常 <code>Demo</code> 對於 <code>CustomButton</code> 來說是<strong>父 Component</strong>，反之則是<strong>子 Component</strong>。</p>
<h2 id="父子-Component-間資訊的傳遞"><a href="#父子-Component-間資訊的傳遞" class="headerlink" title="父子 Component 間資訊的傳遞"></a>父子 Component 間資訊的傳遞</h2><p>上一篇有提到 props，這裡直接仁來複習一下。</p>
<blockquote>
<p>props 是 React 父子元件間溝通的橋樑。靜態（唯讀）。<br>父元件用屬性賦值的方式傳給子元件，子元件用 this.props 讀取。但不應於子元件內變動 （唯讀）。<br><strong>父元件傳入的 props 改變將造成子元件重繪。</strong></p>
<p>EX：<br>父元件內<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">Fuck</span> <span class="attr">fuck</span>=<span class="string">"?"</span>/&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
</blockquote>
<p>子元件<code>Fuck</code>內<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;this.props.fuck&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>因為父元件傳入<code>?</code>，所以這裡會顯示<code>?</code></p>
<blockquote>
<p>– 仁自<a href="/2016/08/06/猴子也能看懂的-React-教學-1/#props-amp-states">前一篇</a></p>
</blockquote>
<p>同樣地，我們可以：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Demo.jsx</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> CustomButton <span class="keyword">from</span> <span class="string">'./CustomButton.jsx'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CustomButton</span> <span class="attr">text</span>=<span class="string">'C8763'</span>/&gt;</span>;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CustomButton.jsx</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span> &#123;this.props.text&#125; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a>props.children</h3><p>之前我們都是用單個閉合標籤表示自定義 Component (像是<code>&lt;CustomButton /&gt;</code>)，然後再一層一層向內設計。但有時候我們想在父 Component 中決定子 Component 的內部結構。<br>這時，我們可能會這樣設計：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Demo.jsx</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> CustomButton <span class="keyword">from</span> <span class="string">'./CustomButton.jsx'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CustomButton</span> <span class="attr">content</span>=<span class="string">&#123;</span>&lt;<span class="attr">button</span>&gt;</span> &#123;...&#125; <span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#125;/&gt;;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// CustomButton.jsx</div><div class="line">import React from 'react'</div><div class="line">export default class CustomButton extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return &#123;this.props.content&#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>利用 props 把子 Component 的內部結構傳進去，但這樣程式碼很醜，<del>身為肥宅工程師，本身就已經慘不忍睹了，怎麼還能讓程式碼跟我們一樣呢？</del><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Demo.jsx</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> CustomButton <span class="keyword">from</span> <span class="string">'./CustomButton.jsx'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">	  <span class="xml"><span class="tag">&lt;<span class="name">CustomButton</span>&gt;</span></span></div><div class="line">	    <span class="tag">&lt;<span class="name">button</span>&gt;</span> &#123;...&#125; <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">CustomButton</span>&gt;</span></div><div class="line">	);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// CustomButton.jsx</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="keyword">this</span>.props.children&#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這樣一來，程式碼就易讀很多了~</p>
<h3 id="props-傳遞技巧"><a href="#props-傳遞技巧" class="headerlink" title="props 傳遞技巧"></a>props 傳遞技巧</h3><p>資料只能在父子間傳遞，而且一般來說是父傳子，所以如果有兩個子元件想要溝通，資料通常會在父元件取得，再往下傳，由一個子元件的 callback function 觸發父元件重繪，改變另一個子元件的 props。<br>比如說想設計一個 Button，按下後會新增一個 Item，那我們可能會這樣設計：</p>
<ol>
<li>按下 Button 觸發 callback function</li>
<li>觸發父 Component setState</li>
<li>父 Component 重繪</li>
<li>改變 Item props</li>
<li>Item 重繪</li>
</ol>
<h3 id="props-傳遞地獄"><a href="#props-傳遞地獄" class="headerlink" title="props 傳遞地獄"></a>props 傳遞地獄</h3><p>當 Component 愈疊愈多層，想要把資料從最頂層的元件傳到最底層的元件就會愈麻煩，就是所謂的 <strong>props 傳遞地獄</strong>。<br>解決方法是使用後端框架 (EX: Redux) 將 state 集中起來，以便管理。<br>Redux 在第四篇會介紹。</p>
<hr>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p>雖說不建議直接操作實體 DOM，但有時候仍會碰到需要直接操作的情況。<br>這時可以設定<code>ref</code>屬性來存取實體 DOM：<br>若 ref 的值為字串，則可以透過<code>this.refs.字串值</code> 存取。<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">React.findDOMNode(<span class="keyword">this</span>.refs.theInput).focus();</div><div class="line">... (render 內)</div><div class="line">&lt;input ref=<span class="string">"theInput"</span>&gt;</div></pre></td></tr></table></figure></p>
<p>若 ref 的值為函數，則傳入的參數值為該元件本身。<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.input.focus();</div><div class="line">... (render 內)</div><div class="line">&lt;input ref=&#123;(input) =&gt; <span class="keyword">this</span>.input = input&#125;&gt;</div></pre></td></tr></table></figure></p>
<p>由於 React.findDOMNode() 傳回的是實體 DOM，所以必須確保實體 DOM 已經被渲染出來才能使用 (componentDidMount() 後面的才能用)</p>
<hr>
<p>先講到這，<a href="/2016/08/15/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-3/">下篇</a> 講的是開發工具 webpack 的環境建置及使用。如果有興趣可以繼續收看~</p>
<p>這篇會不定期更新，如果有打錯或有任何疑問都歡迎留言告知喔~<br>我們下篇再見~</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;ES5 VS ES6&lt;/li&gt;
&lt;li&gt;Component&lt;/li&gt;
&lt;li&gt;refs&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="教學" scheme="https://j6qup3.github.io/categories/%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="React" scheme="https://j6qup3.github.io/tags/React/"/>
    
      <category term="教學" scheme="https://j6qup3.github.io/tags/%E6%95%99%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>猴子也能看懂的 React 教學 - 1 - React 概念</title>
    <link href="https://j6qup3.github.io/2016/08/06/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-1/"/>
    <id>https://j6qup3.github.io/2016/08/06/猴子也能看懂的-React-教學-1/</id>
    <published>2016-08-06T08:44:42.000Z</published>
    <updated>2016-08-29T04:11:09.586Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt -->
<blockquote>
<p>讓一隻猴子在打字機上隨機地按鍵，當按鍵時間達到無窮時，幾乎必然能夠打出任何給定的文字，比如莎士比亞的全套著作。</p>
<p>– 《<a href="https://zh.wikipedia.org/wiki/%E7%84%A1%E9%99%90%E7%8C%B4%E5%AD%90%E5%AE%9A%E7%90%86" target="_blank" rel="external">無限猴子定理</a>》- <a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E7%B1%B3%E5%B0%94%C2%B7%E5%8D%9A%E9%9B%B7%E5%B0%94" target="_blank" rel="external">埃米爾·博雷爾</a></p>
<p>讓一隻猴子看這篇文章，一直看，一直看，當閱讀時間達到無窮時，幾乎必然能夠理解這篇文章。</p>
<p>– 《真 · 無限猴子定理》- 初雪</p>
</blockquote>
<p><del>其實標題打錯了，是猴子<strong>才</strong>能看懂。</del><br>看不懂就別怪我囉，至少可以證明你不是猴子(X</p>
<p>先聲明一下，本文所引用的資源和圖片會儘量以中文為主<del>（因為我英文很爛）</del>，有些資源是簡體中文，看不習慣的觀眾可以跳過該部份，還請見諒~</p>
<p>那我們就開始吧~</p>
<hr>
<!-- toc -->
<hr>
<h1 id="React-概述"><a href="#React-概述" class="headerlink" title="React 概述"></a>React 概述</h1><h2 id="下載-React"><a href="#下載-React" class="headerlink" title="下載 React"></a>下載 React</h2><p>首先，到 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React 官網</a> 下載 <a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">React 最新版</a>。<br>在等待下載的同時來說明一下何為 React。</p>
<h2 id="什麼是-React？"><a href="#什麼是-React？" class="headerlink" title="什麼是 React？"></a>什麼是 React？</h2><p>React 是 facebook 開發的一個 JS 函式庫，負責產生與管理前端的 UI 。它<strong>並不是框架</strong>。</p>
<h2 id="React-特色-–-為什麼我要用它？"><a href="#React-特色-–-為什麼我要用它？" class="headerlink" title="React 特色 – 為什麼我要用它？"></a>React 特色 – 為什麼我要用它？</h2><ol>
<li>用純 JS 在前端產生 HTML （一般來說是在後端產生 HTML 送到前端）</li>
<li>使用 <strong>Virtual DOM</strong>，重繪時效率高</li>
<li>自定義 <strong>Component</strong>，方便開發</li>
<li>父子 Component 可透過 <strong>props</strong> 通訊</li>
<li>只負責 MVC 的 View 部份，所以不算框架，彈性高</li>
<li>因為完全是 JS 操作 UI 的關係，使得它可以跟後端分離，達到即時互動、自動更新的效果</li>
<li>只是一個 JS 函式庫，所以容量小易移植</li>
</ol>
<p>這樣對 React 有沒有比較明白了呢？</p>
<h2 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://npmcdn.com/babel-core@5.8.38/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="xml"></span></div><div class="line">      ReactDOM.render(</div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</div><div class="line">        document.getElementById('example')</div><div class="line">      );</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>這是官網的例子，<del>被我仁了</del><br>我假設各位都知道 HTML 的語法，這裡不再贅述。<br>首先，要用 React 的話，必須先引入 React 函式庫，你可以在你剛下載的 React 資料夾中找到。如第 6 行、第 7 行。<br>第 8 行引入的是 <strong>babel</strong> 函式庫，用來編譯 JSX 成 JS，至於什麼是 JSX <a href="#JSX">稍後</a>會解釋。<br>12 行 ~ 17 行是<strong>重點</strong>，用 React 在 id 為 example 的元件內渲染出 h1 tag。</p>
<h2 id="NPM-環境初始建置"><a href="#NPM-環境初始建置" class="headerlink" title="NPM 環境初始建置"></a>NPM 環境初始建置</h2><p>NPM 原本是 Node.js 套件管理器，至今已經變成前後端的開發利器，我就不多解釋了，想了解的可以請教萬能的 <a href="https://www.google.com.tw/search?q=npm" target="_blank" rel="external">Google 大神</a>。<br>沒 NPM 的可以去 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js 官網</a>下載。<br>首先先建個 <strong>package.json</strong><br><code>npm init</code><br>你執行時所在的目錄就是 <strong>NPM 專案的根目錄</strong></p>
<p>填完配置之後裝個 React<br><code>npm install --save react react-dom</code><br>下載的就是你剛剛去 React 官網下載的東西，只不過使用套件管理系統比較方便開發及使用。<del>所以大家可以把官網下載的刪了</del></p>
<h2 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h2><h3 id="DOM-是什麼？"><a href="#DOM-是什麼？" class="headerlink" title="DOM 是什麼？"></a>DOM 是什麼？</h3><p>熟悉前端的工程師應該會知道 DOM，如果不知道也沒關係，<del>你總會知道的</del></p>
<p>但我的手業障重，不想打字 QQ，只好請教萬能的維基大神。</p>
<blockquote>
<p>文件物件模型（英語：Document Object Model，縮寫DOM），是W3C組織推薦的處理可延伸標示語言的標準程式介面。 </p>
<p>– 仁自 <a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B" target="_blank" rel="external">維基</a></p>
</blockquote>
<p>什麼？看不懂？沒關係，我也看不懂。你不是一個人(X<br>這麼簡陋真的是維基而不是偽基嗎？<br>看來只好請教開源大溼 mozilla。</p>
<blockquote>
<p>文件物件模型（Document Object Model, DOM）是 HTML、XML 和 SVG 文件的程式介面。它提供了一個文件（樹）的結構化表示法，並定義讓程式可以存取並改變文件架構、風格和內容的方法。DOM 提供了文件以擁有屬性與函式的節點與物件組成的結構化表示。節點也可以附加事件處理程序，一旦觸發事件就會執行處理程序。 本質上，它將網頁與腳本或程式語言連結在一起。 </p>
<p>– 仁自 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Document_Object_Model" target="_blank" rel="external">MDN</a></p>
</blockquote>
<p>簡單來說 DOM 就是用以定義 HTML、XML 和 SVG 的規範，使得各瀏覽器依此進行實作。這樣一來，標準就統一了，<del>工程師又能繼續爆肝了</del>。</p>
<h3 id="為什麼要用-Virtual-DOM？"><a href="#為什麼要用-Virtual-DOM？" class="headerlink" title="為什麼要用 Virtual DOM？"></a>為什麼要用 Virtual DOM？</h3><p>什麼是 Virtual DOM？<br>從字面上看，是虛擬 DOM。<br>而實際上，就是虛擬 DOM！<br>沒錯，就是<strong>假的</strong>。<del>DOM 業障重</del><br><img src="https://app.kxg.io/images/jiade/fb.jpg" alt="假的"></p>
<p>首先先來說說 DOM 的問題。<br>它<strong>很慢</strong>。實在是太慢了，慢到 JS 比他快很多倍。如果要用 JS 在前端即時改變 UI 的話，哪怕只是增加了一點小東西，也要重繪！加三個元件就要重繪三次，如果大量操作元件的話效能很不好。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">  a.innerHTML = arr[i];</div><div class="line">  div.appendChild(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的範例每次 appendChild 時就會重繪一次，總共重繪了 10 次。</p>
<p>為了解決這個問題，React 做了一個 Virtual DOM。<br>Virtual DOM 是用 JS 打造的<strong>虛擬中界層</strong>，每當重繪時，就會先在 Virtual DOM 中重繪，再用 diff 演算法比對它跟實際的 DOM 有什麼不同，只要修改不同的地方就好，而且只重繪一次。<br>因為 JS 速度遠比實際 DOM 快，在 Virtual DOM 中重繪的時間跟 DOM 操作的時間相比可以忽略不計。<br>關於 diff 演算法和 Virtual DOM 內部結構可以看看<a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="external">這裡</a>。</p>
<p>JS 中有個類似的東西叫 DocumentFragment，是一個用 JS 打造的虛擬元件，用以合併處理 DOM，像上面的範例就可以改成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</div><div class="line">  a.innerHTML = arr[i];</div><div class="line">  frag.appendChild(a);</div><div class="line">&#125;</div><div class="line"></div><div class="line">div.appendChild(frag);</div></pre></td></tr></table></figure></p>
<p>這樣就只要重繪一次！<br>但是這是手動的方式，何況若改變的元件不在同個父元件底下的話還是得重繪多次。<br>但 Virtual DOM 是全自動，而且沒有以上的限制！</p>
<p>所以 JSX 描述的那些元件都不是實際的 DOM，React 會先在 Virtual DOM 上模擬後再改動實際的 DOM，也就是說，你不可能，也不應該直接操作實體 DOM。</p>
<hr>
<p>先說說 JSX 吧。若已經會或者不想用 JSX 的話可以先跳到<a href="#props-&amp;-states">下一段</a>。不過之後的範例會以 JSX 為主。</p>
<hr>
<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><h2 id="為什麼要用-JSX？"><a href="#為什麼要用-JSX？" class="headerlink" title="為什麼要用 JSX？"></a>為什麼要用 JSX？</h2><p>前面說過，React 是用純 JS 在前端產生 HTML 的，用原生 JS 寫起來會很麻煩 （一堆 createElement），因此，我們可以使用 <strong>JSX</strong>，它是 JS / ECMAScript 對 XML 的擴充語法，以 XML-like 的語法表達 JS 產生元件的函數，簡單來說就是語法糖 (Syntatic Sugar)。使用的話有助於精簡程式碼，而且對於大多數前端工程師來說 XML 的格式比較直觀，易於閱讀。</p>
<p>JSX<br><code>&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;Hello!&lt;/a&gt;</code></p>
<p>等同於</p>
<p>JS<br><code>React.createElement(&#39;a&#39;, {href: &#39;https://facebook.github.io/react/&#39;}, &#39;Hello!&#39;)</code></p>
<p>上面的範例中可以發現 JSX 的程式碼明顯精簡易讀。<br>如果要創建具有父子關係的多個節點，那兩者複雜度就會差更多了。</p>
<blockquote>
<p>總結<br>JSX 是開發 React 推薦使用的語言，你可以不用 JSX，然而那將使程式碼難以閱讀和維護。</p>
</blockquote>
<h2 id="JSX-怎麼寫？"><a href="#JSX-怎麼寫？" class="headerlink" title="JSX 怎麼寫？"></a>JSX 怎麼寫？</h2><p>HTML 大部份的寫法在 JSX 都可以通用，<strong>除了</strong>以下幾點限制：</p>
<ol>
<li>HTML 的 class 屬性在 JSX 須寫為 className (class 為 JSX 保留字)</li>
<li>HTML 的 for 屬性在 JSX 須寫為 htmlFor (for 為 JSX 保留字)</li>
<li>所有 tag 都須被閉合 (XML 的特性)<br>EX：HTML <code>&lt;br&gt;</code> =&gt; JSX <code>&lt;br /&gt;</code></li>
<li>同 JS，註解可以用 <code>/* */</code> 或 <code>//</code>，在 tag 中使用的話則須用大括號 <code>{}</code> 包住</li>
<li><p>事件觸發是採用駝峰式命名法而不是全部小寫。<br>EX：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.c8763&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>style 屬性要以 JS 物件的格式設定 (JSON)，採用駝峰式命名法而非<code>-</code>，數值的單位是 px，其他單位要用單引號包住 (EX: ‘50%’)。別忘記外面要再加上一層大括號。<br>EX：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> '<span class="attr">16px</span>', <span class="attr">color:</span> '#<span class="attr">FF0</span>' &#125;&#125;&gt;</span>87<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>JSX 除了 HTML 外還可以用其他的寫法，例：</p>
<ol>
<li>因為 JSX 只是 JS 的擴充語法，JS 語法仍可使用，在 tag 中使用的話則須用大括號 <code>{}</code> 包住</li>
<li>可以用 <strong>class</strong> 自定義 Component 來使用，第一個字母必須是大寫 (XML 的特性 + JS 的類別)</li>
</ol>
<p>另外，JSX 是將 tag 轉換成函數，因此一個頂端 tag 對應一個函數。在 retuen 時只能回傳一個頂端 tag，可以在最外層套一個 div 或 Component 解決這個問題。</p>
<p>以上講的很簡略，如果想知道更多資訊，可以看一下<a href="http://blog.techbridge.cc/2016/04/21/react-jsx-introduction/#%E4%BA%8C%E3%80%81JSX-%E7%94%A8%E6%B3%95%E6%91%98%E8%A6%81" target="_blank" rel="external">這裡</a>。</p>
<h2 id="怎麼編譯-JSX？"><a href="#怎麼編譯-JSX？" class="headerlink" title="怎麼編譯 JSX？"></a>怎麼編譯 JSX？</h2><p>JSX 可以像上面的例子一樣被包在 HTML 的 <code>&lt;script type=&quot;text/babel&quot;&gt;&lt;/script&gt;</code> 中，引入 JSX 編譯器 babel，直接在 Client 端解析，但我們一般會將 JSX 分成獨立檔案以便維護以及增加載入效率，然後用 babel 編譯成 JS （現在幾乎都會使用 <strong>CommonJS bundler</strong>）。<br>EX：<code>&lt;script type=&quot;text/jsx&quot; src=&quot;main.jsx&quot;&gt;&lt;/script&gt;</code></p>
<h2 id="Babel-安裝-amp-配置"><a href="#Babel-安裝-amp-配置" class="headerlink" title="Babel 安裝 &amp; 配置"></a>Babel 安裝 &amp; 配置</h2><p><code>npm install --save-dev babel-cli</code><br>安裝完就可以用指令 <code>babel</code> 來編譯檔案了。<br>EX：<code>babel uncompile.js -o compiled.js</code><br>意思就是說將 uncompile.js 編譯成 compiled.js。<br>但要是你真的輸入這個指令，你會發現 compiled.js 的內容一模一樣，顯然沒有進行編譯。<br>沒編譯是因為你尚未和 Babel 說你到底要編譯什麼。<br>那麼，要怎麼告訴它呢？</p>
<p>首先，在 NPM 專案的根目錄建立一個名叫 <strong>.babelrc</strong> 的檔案，並輸入以下內容：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ECMAScript 是所有瀏覽器實作 JS 所參考的標準模型，其第六版簡稱為 <strong>ES6 / ES2015</strong>，因為篇幅有限，在<a href="/2016/08/10/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-2/">下一篇</a>才會講解 ES6 和 ES5 的寫法差異。<br>總之，使用 ES6 對於開發上會比較方便，但不是所有瀏覽器都支援 ES6 語法，因此我們要把 ES6 轉成 ES5 。<br><code>npm install --save-dev babel-preset-es2015</code></p>
<p>然後 .babelrc 改一下設定：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [</div><div class="line">    <span class="string">"es2015"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這樣 Babel 就可以編譯 ES6 了！但還是不能編譯 JSX。<br>如果我們想編譯 JSX 的話：<br><code>npm install --save-dev babel-preset-react</code></p>
<p>然後 .babelrc 改一下設定：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [</div><div class="line">    <span class="string">"es2015"</span>,</div><div class="line">    <span class="string">"react"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這樣就可以編譯<strong>使用 ES6 語法的 JSX</strong> 了。</p>
<p>但每次 debug 都要按 F12 看 console，<del>對於我這種懶人來說</del>太麻煩了，於是我就找到了 <strong>babel-preset-react-hmre</strong>。<br>每當 babel 編譯出錯時都會跑出<del>很狂、很潮、很炫炮的</del>紅底白字喔 ~<br><code>npm install --save-dev babel-preset-react-hmre</code></p>
<p>同樣的 .babelrc 改一下設定：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [</div><div class="line">    <span class="string">"es2015"</span>,</div><div class="line">    <span class="string">"react"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"env"</span>: &#123;</div><div class="line">   <span class="string">"development"</span>: &#123;</div><div class="line">     <span class="string">"presets"</span>: [<span class="string">"react-hmre"</span>]</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>PS. env.development.presets 是代表說開發的時候才會用到的，正式放到 server 上時不會使用。</p>
<p>如果對 Babel 還有興趣可看<a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md#toc-setting-up-babel" target="_blank" rel="external">這裡</a>。<br>但是這樣的話要手動一個一個編譯，像我這種懶人只好用一些 bundle 工具了。<br>於是我找到了 <strong>Webpack</strong>。</p>
<p>PS. 關於 Webpack 我會在<a href="/2016/08/15/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-3/">第三篇</a>詳細介紹。</p>
<hr>
<h1 id="props-amp-states"><a href="#props-amp-states" class="headerlink" title="props &amp; states"></a>props &amp; states</h1><p>前面有稍微提到過 props。<br>沒錯，只有提到一次而已，而且我講的很含糊。等等，別打我，我接下來就要講了啦~</p>
<h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>props 是 React 父子元件間溝通的橋樑。靜態（唯讀）。<br>父元件用屬性賦值的方式傳給子元件，子元件用 this.props 讀取。但不應於子元件內變動 （唯讀）。<br><strong>父元件傳入的 props 改變將造成子元件重繪。</strong></p>
<p>EX：<br>父元件內<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">Fuck</span> <span class="attr">fuck</span>=<span class="string">"?"</span>/&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>子元件<code>Fuck</code>內<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;this.props.fuck&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>因為父元件傳入<code>?</code>，所以這裡會顯示<code>?</code></p>
<h2 id="states"><a href="#states" class="headerlink" title="states"></a>states</h2><p>states 是元件內部狀態。動態（可用 <strong>setState</strong> 改值）。<br>與一般變數不同的是，它無法直接修改（初始化例外），只能用 this.setState() 修改。<br><strong>每次使用 this.setState() 修改 state 都會造成元件重繪。</strong></p>
<p>EX：<br>state 初始化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.state = &#123;</div><div class="line">  users: []</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>setState<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(&#123;</div><div class="line">  users: list</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>state 初始化<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">UserList</span> <span class="attr">users</span>=<span class="string">&#123;this.state.users&#125;/</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>這兩個都是很常用到的東西。<del>不管黑貓白貓，能讓頁面重繪的就是好貓</del><br>能讓頁面重繪的其實還有一個函數：<code>this.forceUpdate()</code>，強制重繪，不過一般是 debug 才會用到，不推薦在其他情況使用。</p>
<hr>
<h1 id="Component-Lifecycle-元件的生命周期"><a href="#Component-Lifecycle-元件的生命周期" class="headerlink" title="Component Lifecycle - 元件的生命周期"></a>Component Lifecycle - 元件的生命周期</h1><p>這裡比較複雜，先來張圖片。<br>圖片就仁一下 <a href="http://www.ibm.com/developerworks/cn/web/1509_dongyue_react" target="_blank" rel="external">IBM</a> 的：<br><img src="http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index5341.png" alt=""><br>先看看右下角的三個生命周期說明。</p>
<ul>
<li>Mounting: 元件初始化</li>
<li>Updating: 元件更新</li>
<li>Unmounting: 元件卸載</li>
</ul>
<p>Mounting 跟 Updating 都會觸發元件內的函數 render()<br>componentWill 和 componentDid 分別是 render 前和後會觸發的函數。<br>Unmounting 不會觸發 render，也沒有 componentDid 函數，但有 componentWill 函數。</p>
<p>如果要細講的話，可以分成五種情況詳細討論：</p>
<ul>
<li><p>Mounting：元件初始化 (React.createClass)</p>
<ol>
<li><p>getDefaultProps()</p>
<ul>
<li><code>React.createClass</code>時觸發（早於 constructor）</li>
<li>只會在 Mounting 時呼叫一次</li>
<li>不能使用 setState() （尚未初始化）</li>
<li>回傳的值將設為 props 的<strong>預設值</strong> （若回傳物件，是傳址）</li>
</ul>
</li>
<li><p>getInitialState()</p>
<ul>
<li><code>React.createElement</code>時觸發 （渲染前觸發）</li>
<li>只會在 Mounting 時呼叫一次</li>
<li>不能使用 setState() （尚未初始化）</li>
<li>回傳的值將設為 state 的<strong>初始值</strong> （回傳物件或<code>null</code>）</li>
</ul>
</li>
<li><p>componentWillMount()</p>
<ul>
<li>只會在 Mounting 時呼叫一次</li>
<li>使用 setState 不會再觸發一次 render，會立即更新</li>
</ul>
</li>
<li><p>render()</p>
<ul>
<li>不能使用 setState() （無限遞迴）</li>
<li>一定要改寫，必須且只能回傳一個頂層 JSX Component 或是 <code>null</code>/<code>false</code> （不渲染）</li>
<li>結束後會造成子元件的 Mounting，意即，子元件的生命周期由此開始</li>
</ul>
</li>
<li><p>componentDidMount()</p>
<ul>
<li>只會在 Mounting 時呼叫一次</li>
<li>子元件 Mounting 完後才觸發</li>
<li>適合存取 DOM</li>
</ul>
</li>
</ol>
</li>
<li><p>Updating：元件接收的 props 改變時</p>
<ol>
<li><p>componentWillReceiveProps(nextProps)</p>
<ul>
<li>使用 setState 不會再觸發一次 render，會立即更新</li>
<li>若該元件有傳入的 props，則父元件 Updating-render 時會觸發（因為會重傳 props）</li>
<li>若沒有 props，此函數將不會被觸發</li>
</ul>
</li>
<li><p>shouldComponentUpdate(nextProps, nextState)</p>
<ul>
<li>不能使用 setState() （無限遞迴）</li>
<li>回傳<code>false</code>的話這次更新直接結束</li>
<li>優化效能用的</li>
</ul>
</li>
<li><p>componentWillUpdate(nextProps, nextState)</p>
<ul>
<li>不能使用 setState() （無限遞迴）</li>
</ul>
</li>
<li><p>render()</p>
<ul>
<li>詳見 Mounting - 4.</li>
<li>結束後會造成子元件的 Mounting、Updating、Unmounting</li>
</ul>
</li>
<li><p>componentDidUpdate(prevProps, prevState)</p>
<ul>
<li>子元件 Mounting、Updating、Unmounting 完後才觸發</li>
</ul>
</li>
</ol>
</li>
<li><p>Updating：元件內部的 state 改變時 (setState) (在這裡任何地方使用 setState 都會造成無限遞迴，除了 componentDidUpdate)<br>同 Update-props 之 2 ~ 5，不再贅述</p>
<ol>
<li>shouldComponentUpdate(nextProps, nextState)</li>
<li>componentWillUpdate(nextProps, nextState)</li>
<li>render()</li>
<li>componentDidUpdate(prevProps, prevState)</li>
</ol>
</li>
<li><p>Updating：使用 forceUpdate 時<br>同 Update-props 之 3 ~ 5，不再贅述</p>
<ol>
<li>componentWillUpdate(nextProps, nextState)</li>
<li>render()</li>
<li>componentDidUpdate(prevProps, prevState)</li>
</ol>
</li>
<li><p>Unmount：元件卸載時 </p>
<ol>
<li>componentWillUnmount()</li>
</ol>
</li>
</ul>
<p>上面的資料太多，可能一時間難以消化，沒關係，目前記住 render() 就夠了。<br>下面我再做一些整理：</p>
<ul>
<li><p>使用 setState 不會再觸發一次 render，會立即更新</p>
<ol>
<li>componentWillMount()</li>
<li>componentWillReceiveProps()</li>
</ol>
</li>
<li><p>有回傳值</p>
<ol>
<li>getDefaultProps()：props 的預設值</li>
<li>getInitialState()：state 的初始值</li>
<li>render()：一個頂層 JSX Component 或是 <code>null</code>/<code>false</code> （不渲染）</li>
<li>shouldComponentUpdate()：<code>true</code>/<code>false</code>，<code>false</code>則這次更新直接結束</li>
</ol>
</li>
</ul>
<hr>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><h2 id="環境配置懶人包"><a href="#環境配置懶人包" class="headerlink" title="環境配置懶人包"></a>環境配置懶人包</h2><ul>
<li><code>npm init</code> NPM 專案初始化</li>
<li><code>npm install --save react react-dom</code> 安裝 React</li>
<li><code>npm install --save-dev babel-cli babel-preset-es2015 babel-preset-react babel-preset-react-hmre</code> babel - cli &amp; ES6 &amp; JSX &amp; babel-preset-react-hmre</li>
</ul>
<hr>
<p>先講到這，這篇講的以概念居多，<a href="/2016/08/10/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-2/">下篇</a> 就會講 React 寫法了。如果有興趣可以繼續收看~</p>
<p>這篇會不定期更新，如果有打錯或有任何疑問都歡迎留言告知喔~<br>我們下篇再見~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React 概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React 特色&lt;/li&gt;
&lt;li&gt;Virtual DOM&lt;/li&gt;
&lt;li&gt;JSX&lt;/li&gt;
&lt;li&gt;props &amp;amp; states&lt;/li&gt;
&lt;li&gt;Component Lifecycle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;環境配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="教學" scheme="https://j6qup3.github.io/categories/%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="React" scheme="https://j6qup3.github.io/tags/React/"/>
    
      <category term="教學" scheme="https://j6qup3.github.io/tags/%E6%95%99%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>發文囉</title>
    <link href="https://j6qup3.github.io/2016/07/29/%E7%99%BC%E6%96%87%E5%9B%89/"/>
    <id>https://j6qup3.github.io/2016/07/29/發文囉/</id>
    <published>2016-07-28T23:15:54.000Z</published>
    <updated>2016-08-04T19:12:24.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="這是一篇廢文"><a href="#這是一篇廢文" class="headerlink" title="這是一篇廢文"></a>這是一篇廢文</h1><p><code>感謝您將寶貴的生命浪費在這</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;這是一篇廢文&quot;&gt;&lt;a href=&quot;#這是一篇廢文&quot; class=&quot;headerlink&quot; title=&quot;這是一篇廢文&quot;&gt;&lt;/a&gt;這是一篇廢文&lt;/h1&gt;&lt;p&gt;&lt;code&gt;感謝您將寶貴的生命浪費在這&lt;/code&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="廢" scheme="https://j6qup3.github.io/categories/%E5%BB%A2/"/>
    
    
      <category term="廢到笑" scheme="https://j6qup3.github.io/tags/%E5%BB%A2%E5%88%B0%E7%AC%91/"/>
    
  </entry>
  
</feed>
